package by.mozolevskij.pharmacy.example.spring.spring_theory;

public class SpringBoot {

    /**SpringBoot предугадывает самую логичную конфигурацию, поэтому в большинстве случаев
     * нам не надо ничего конфигурировать, помогает собирать и разворачивать приложение на сервере
     * (без консоли), что происходит внутри:
     *
     * Без спринг
     * Приложение собирается в .war файл, этот файл разворачивается на сервере Tomcat, на локальном сервере
     * Если придется разворачивать приложение на удаленном сервере - придется делать все в ручную через командную строку
     * Самим собирать наше приложение в .war файл, самим запускать сервер, деплоить .war файл на этот сервер.
     *
     * С спринг
     * Есль класс с методом main(), при запуске уоторого запускается встрроенный web-сервер в SpringBoot
     * на этом сервере будет работать приложение, минуется ручные манипуляции
     * Spring приложение запускается как обычная Java программа
     *
     * Анализирует зависимости в POM.XML и производит конфигурацию
     * Исключает конфликты зависимостей
     * Spring Boot представляет стартеры, являющиеся одной большой зависимостью, между стартерами не
     * может быть конфликтов,
     *
     * Spring Initializer - dependencies, .war-файл можно вручную кидать на удаленный сервер (на tomcat)
     * .jar - запуск сервера при помощи метода main в классе, используя встроенный сервер SpringBoot
     *
     * mwnw и mwnw.cmd - скрипты для запуска Maven команды, позволяет собрать jar.-файл в ручную,
     * mwnw.cmd - для Linux, mwnw - для Windows,
     * Когда нет Maven на сервере - автоматически скачивает при запуске скрипта, не нужны если на
     * компьютере уже есть Maven
     *
     *@SpringBootApplication - содержит остальные аннотации, одна аннотация для настройки всего
     * * атоконфигурация приложениея
     * * настройка сканирование компоненто и тд (@ComponentScan, @Configuration)
     * * создает бины из классов помечченыых анотацией @Componenet
     * * Сканирует все классы в текущей папкеи всех подпапках
     * public class SpringCourseBootApplication - запускает SpringBoot приложение, должен находится
     * в корне проекта
     *
     * Файл Application.properties SB автоматически смотрит его содержимое, здесь помещается конфигурация
     * SpringBoot приложения (заменяет SpringConfig), конфигурирует БД и тд, можно импользовать
     * свои значения. Пример испоьтзования в Java code:
     * @Value(${"hello"})
     * private String hello; - присвивается значение hello из properties
     *
     * Папка static - файлы, картинки, html, css
     * Папка templates - шаблоны (Теперь все лежит в recources (нет WEB-APP)
     *
     * WEBAPP - стандартная папка может использоавться только в том случае если прект собирается
     * в .war - файл наше приложение собирается в .jar файл)
     *
     * Папка test - Unit тесты
     *
     * Запуск на удаленном сервере:
     * Берем сервер на Amazon например, загружаем папку SpringBootApp на удаленный сервер,
     * при работе с сервером нет никакого графического предастванения, нет среды разрабтки,
     * по SSH подключаемся к удаленному серверу и работаем с ним через консоль:
     *
     *  $ cd (path to app)
     *  $ ls (проказывает файлы приложения)
     *  $ mvn (cборка проекта в .jar-файл если Maven установлен на компьютере)
     *  $ ./mvnw (запуск Maven на Linux или MacOS)
     *  $ mvmw (запуск Maven на Windows) (генерация .jar файла)
     *  (не получилось)
     *  $ cd target/
     *  $ ls (получаем список файлов)
     *  $ java -jar (file name.jar) - запуск приложения на сервере
     *
     *  Клавиша ctrl+c - выключение приложения
     * */

}
