package by.mozolevskij.pharmacy.example.learning.git;

public class GitPractice {
    /** Работа на практике
     * Через SSH ключ клонирование (git clone git@github.com:NikitaMozolevsky/GitLearning.git) не работает
     * (git@github.com: Permission denied (publickey)), выполняю через https (git clone https://github.com/NikitaMozolevsky/GitLearning.git).
     *
     * Директорию .idea кидаем в .gitignore т.к. это персональные настройки, не нужные другому разработчику,
     * После этого файты в гитигнор помечаются желтым
     *
     * История коммитов: Viev -> Tool Windows -> Git
     * После коммита можно запушить его на удаленный репозиторий
     * Пуш напрямую в главную векту запрещен, создается локальная ветка, в ней делается коммит,
     * затем создается отдаленная ветка, потом создается вливание в главную ветку
     *
     * Создание локальной ветки: Git -> Branches, Теперь коммиты будут вносится в созданную ветку.
     * После всех коммитов проект пуллится на GitHub, после этого жмется Pull Request.
     * Затем можно начинать слияние с главной веткой (Pull). Pull перенос кода из хранилища в
     * локальный репозиторий
     * Далее переключаемся на main ветку
     * (можно посмотреть как происходила работа с векткой)
     *
     * Добавть файл в git - file -> git -> add
     *
     * Если в git-консоли нажать ctrl+d, покажутся изменения между коммитами
     * Shift+insert вставка в GitBush
     * */

    /**
     *
     * Создать новую ветку -> перейти на нее
     * cmd: git branch bagFix -> cmd: git checkout bagFix
     * (cmd: git checkout -b bugFix) - briefly
     *
     * Сделать MERGE bagFix и main
     * cmd: git merger bugFix (ветка которую присоединяем к текущей)
     *
     * Сделать REBASE (все в одну ветку)
     * cmd: git rebase main (ветка на которую мы перемешаемся ?)
     *
     * HEAD - символическое имя текущего коммита (комита над которым
     * ведется работа), обычно HEAD принадлежит ветке, а не коммиту
     *
     * cmd: git checkout C1 - переход на коммит, хэш которого С1
     *
     * cmd: git checkout HEAD^ - переход на коммит, который выше
     * текущего на 1
     *
     * Перемешение веток, можно напрямую прикрепить ветку к комииту,
     * при помоши опции -f, например:
     * cmd: git branch -f main HEAD~3 - переместит ветку main на 3
     * родителя назад отностиельно позиции HEAD
     *
     * Отмена изменений перенося ссылку на более старый коммит,
     * буд-то этого коммита не было
     *
     * cmd: git reset HEAD~1 - возвращение на 1 комит от HEAD
     * в локальном репозитории
     *
     * cmd: git revert HEAD - изменения с которыми делятся со всеми,
     * создается новый коммит в котором изменения противоположны
     *
     */
}
