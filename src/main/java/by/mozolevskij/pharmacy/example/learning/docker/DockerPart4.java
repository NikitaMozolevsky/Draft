package by.mozolevskij.pharmacy.example.learning.docker;

public class DockerPart4 {

    /**
     *
     * 25. Создание образов - если нет подходящего на DH,
     * добавление своего приложения в образ, добавление инструкции
     * по запуску этого приложения.
     *
     * Dockerfile - файл с инструкцией для docker для создания нового образа,
     * один dockerfile для одного образа
     * Этот файл помещается обычно в корне папки приложения
     * В одном файле может быть несколько инструкций для одного образа - несколько слоев
     *
     * При создании своего образа нужно указать базовый образ, который берется за основу,
     * слои моего образа добавляются к слоям базового
     *
     * как выглядит Dockerfile:
     * 1)FROM phyton:alpine - базовый образ (имя:тег/версия БО (Latest по ум.))
     * alpine - тег всегда указывет на минимальную версию образа
     *
     * 2)WORKDIR /app - создается рабочая директория/папка внутри образа
     * для помещения туда своих файлов и папок т.к. не рекомендуется их помещать
     * внутрь образа, можно случайно изменить системные папки
     *
     * 3)COPY . . - делает папку /app текущей для всех последующих команд
     *
     * CMD [ "phyton", "main.ry"] - указывает какая команда будет выполнена когда
     * создастся новый контенер на основании созданного образа, запускается
     * процесс "phyton" и ему передается аргумент "main.py", эотот файл
     * должен уже находится в /app, на этапе COPY файл main.py копируется в /app
     *
     * Имея такой dockerfile можно создать ноый образ
     * ()docker build .() - . - если уже нахожусь в папке где находится dockerfile
     * есть опция -f, после ее можно указать имя dockerfile (обычно оно Dockerfile),
     * тогда это не нужно
     * ()docker build . -t my-calendar:4.1.1() - добавление имени и тега для образа
     *
     * 26.Примитивное приложение python c docker : C:\Users\Nikita\Downloads\phyton
     *
     * 27. Создание образа:
     * ()docker build . (если нахожусь в папке в образом) -t my-calendar()
     * Загружается базовый образ (python:alpine)
     * Т.е выполняется все по инструкции Dockerfile
     * создается /app по инструкции,
     * COPY . . - копируются все файлы в /app
     *
     * Команда CMD находится внутри образа, инструкция не срабатывает
     *
     * 28. Запуск контейнера
     * 29. Создание нового образа с новой записью, по итогу у меня есть
     * две версии одного и того же образа
     *
     * 30. Просмотр файловой стр-ры внутри контейнера,
     * ()docker exec -it 1d89963eb698 sh() - попасть в файловую систему
     * контейнера (папку /app),
     * ()cat main.py() - показать файл main.py
     *
     * 31.Контейнеризация с Node.js, создание файла с определенным именем
     * 32-33. Создвл при помощи nodejs файл, после этого контейнер закончил
     * свою работу, теперь нужно посмотреть где этот файл находится
     * ()docker exec -it 7ec092b6e446 sh() - однако нельзя посмотреть
     * содержимое остановленного контейнера, можно модифицировать приложение что-бы
     * оно продолжило работу.
     * Дали задание работать 10 секунд, за это время посмотрели внуьрь контейнера,
     * нашли так созданный нами файл и его содержимое.
     *
     * * */


}
